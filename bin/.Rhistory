geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.8) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.8) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount)) +
scale_color_discrete(name = "Specie")
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
scale_fill_manual(values = getPalette(colourCount))
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
scale_color_discrete(name="Diamonds")
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount)) +
scale_color_discrete(name="Diamonds")
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.title=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount), name="Diamonds")
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount)) +
scale_color_discrete(name = nam)
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
scale_color_discrete(name="First Initial") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral", name="First Initial") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences)) +
geom_bar(stat = "identity", fill = Especie)) +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral")
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_brewer(palette="Spectral") +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount)) +
scale_color_discrete(name="First Initial")
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount)) +
scale_color_discrete(name="First Initial")
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
ylab("Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
labs(y = "Number of reads") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
labs(y = "Number of reads", fill = "Specie") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
labs(x = "Samples", y = "Number of reads", fill = "Specie") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
labs(x = "Samples", y = "Number of reads", fill = "Specie") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
gbsx <- gbsx[-c(97), ]
gbsx <- read.table("../Stacks/gbsx_demultiplex_stats.txt", sep = "\t", header=FALSE)
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=FALSE)
View(gbsx)
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE)
View(gbsx)
View(gbsx)
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE, na.rm = TRUE)
View(gbsx)
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE, na.rm = FALSE)
read.table()
?read.table
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE, na.strings=c("", "NA"))
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE, na.strings="NA")
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE, na.strings="NA")
View(gbsx)
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE, na.strings="")
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE)
gbsx <- read.table("../data/gbsx_demultiplex_stats.txt", sep = "\t", header=TRUE)
gbsx <- na.omit(gbsx)
View(gbsx)
gbsx <- read.table("../data/GBSX_reads_stats.csv")
View(gbsx)
gbsx <- read.table("../data/GBSX_reads_stats.csv", sep = "\t", header=TRUE)
View(gbsx)
gbsx <- read.table("../data/GBSX_reads_stats.csv", sep = ",", header=TRUE)
View(gbsx)
sum(as.numeric(gbsx$total.count), na.rm = TRUE)
View(gbsx)
sum(as.numeric(gbsx$total_sequences), na.rm = TRUE)
PyRad <- read.csv("../data/demultiplex_stats.csv", sep = "\t", header=TRUE)
PyRad <- read.csv("../data/ipyrad_demultiplex_stats.csv", sep = "\t", header=TRUE)
View(PyRad)
sum(as.numeric(PyRad$total_reads), na.rm = TRUE)
250493908+7202891
245887124+11809675
stacks <- read.table("../data/stacks_demultiplex_stats.txt", sep = "\t", header=FALSE)
View(stacks)
sum(as.numeric(stacks$V4), na.rm = TRUE)
sum(as.numeric(gbsx$total_sequences), na.rm = TRUE)
sum(as.numeric(PyRad$total_reads), na.rm = TRUE)
sum(as.numeric(stacks$V4), na.rm = TRUE)
Programa <- c("ipyrad", "Stacks", "GBSX")
Match_reads <- c(244146750, 245887124, 250493908)
No_match_reads <- c(13550049, 11809675, 7202891)
rend_soft <- data.frame(Programa, Match_reads, No_match_reads)
rend_soft <- melt(data = rend_soft, id.vars = "Programa", measure.vars = c("Match_reads", "No_match_reads"))
library(tidyr)
rend_soft <- melt(data = rend_soft, id.vars = "Programa", measure.vars = c("Match_reads", "No_match_reads"))
library(reshape2)
rend_soft <- melt(data = rend_soft, id.vars = "Programa", measure.vars = c("Match_reads", "No_match_reads"))
ggplot(rend_soft, aes(x = Programa, y = value/1e+07, fill = forcats::fct_rev(variable))) +
geom_bar(stat = "identity", position = "stack")
Programa <- c("ipyrad", "Stacks", "GBSX")
Match_reads <- c(94.74, 95.41, 97.20)
No_match_reads <- c(5.25, 4.58, 2.79)
rend_soft <- data.frame(Programa, Match_reads, No_match_reads)
rend_soft <- melt(data = rend_soft, id.vars = "Programa", measure.vars = c("Match_reads", "No_match_reads"))
ggplot(rend_soft, aes(x = Programa, y = value, fill = forcats::fct_rev(variable))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(value,"%")), position = position_stack(vjust = .5)) +
labs(fill = "") + xlab("Programa para Demultiplexear") + ylab("Porcentaje %")
gbsx <- read.table("../data/GBSX_reads_stats.csv", sep = ",", header=TRUE)
sum(as.numeric(gbsx$total_sequences), na.rm = TRUE)
PyRad <- read.csv("../data/ipyrad_demultiplex_stats.csv", sep = "\t", header=TRUE)
sum(as.numeric(PyRad$total_reads), na.rm = TRUE)
stacks <- read.table("../data/stacks_demultiplex_stats.txt", sep = "\t", header=FALSE)
sum(as.numeric(stacks$V4), na.rm = TRUE)
Software <- c("ipyrad", "Stacks", "GBSX")
Match_reads <- c(94.74, 95.41, 97.20)
No_match_reads <- c(5.25, 4.58, 2.79)
rend_soft <- data.frame(Programa, Match_reads, No_match_reads)
Software <- c("ipyrad", "Stacks", "GBSX")
Match_reads <- c(94.74, 95.41, 97.20)
No_match_reads <- c(5.25, 4.58, 2.79)
rend_soft <- data.frame(Software, Match_reads, No_match_reads)
rend_soft <- melt(data = rend_soft, id.vars = "Software", measure.vars = c("Match_reads", "No_match_reads"))
rend_soft <- melt(data = rend_soft, id.vars = "Software", measure.vars = c("Match_reads", "No_match_reads"))
Software <- c("ipyrad", "Stacks", "GBSX")
Match_reads <- c(94.74, 95.41, 97.20)
No_match_reads <- c(5.25, 4.58, 2.79)
rend_soft <- data.frame(Software, Match_reads, No_match_reads)
rend_soft <- melt(data = rend_soft, id.vars = "Software", measure.vars = c("Match_reads", "No_match_reads"))
View(rend_soft)
## Load the results of demultiplex to ipyrad, stacks and gbsx and Sum of correctly match reads
gbsx <- read.table("../data/GBSX_reads_stats.csv", sep = ",", header=TRUE)
sum(as.numeric(gbsx$total_sequences), na.rm = TRUE)
PyRad <- read.csv("../data/ipyrad_demultiplex_stats.csv", sep = "\t", header=TRUE)
sum(as.numeric(PyRad$total_reads), na.rm = TRUE)
stacks <- read.table("../data/stacks_demultiplex_stats.txt", sep = "\t", header=FALSE)
sum(as.numeric(stacks$V4), na.rm = TRUE)
Software <- c("ipyrad", "Stacks", "GBSX")
Match_reads <- c(94.74, 95.41, 97.20)
No_match_reads <- c(5.25, 4.58, 2.79)
rend_soft <- data.frame(Software, Match_reads, No_match_reads) %>%
melt(data = rend_soft, id.vars = "Software", measure.vars = c("Match_reads", "No_match_reads"))
rend_soft <- data.frame(Software, Match_reads, No_match_reads)
rend_soft <- melt(data = rend_soft, id.vars = "Software", measure.vars = c("Match_reads", "No_match_reads"))
gbsx <- read.table("../data/GBSX_reads_stats.csv", sep = ",", header=TRUE)
sum(as.numeric(gbsx$total_sequences), na.rm = TRUE)
PyRad <- read.csv("../data/ipyrad_demultiplex_stats.csv", sep = "\t", header=TRUE)
sum(as.numeric(PyRad$total_reads), na.rm = TRUE)
stacks <- read.table("../data/stacks_demultiplex_stats.txt", sep = "\t", header=FALSE)
sum(as.numeric(stacks$V4), na.rm = TRUE)
Software <- c("ipyrad", "Stacks", "GBSX")
Match_reads <- c(94.74, 95.41, 97.20)
No_match_reads <- c(5.25, 4.58, 2.79)
perf_soft <- data.frame(Software, Match_reads, No_match_reads)
perf_soft <- melt(data = perf_soft, id.vars = "Software", measure.vars = c("Match_reads", "No_match_reads"))
## Plot of software performance
ggplot(perf_soft, aes(x = Programa, y = value, fill = forcats::fct_rev(variable))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(value,"%")), position = position_stack(vjust = .5)) +
labs(fill = "") + xlab("Programa para Demultiplexear") + ylab("Porcentaje %")
## Plot of software performance
ggplot(perf_soft, aes(x = Software, y = value, fill = forcats::fct_rev(variable))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(value,"%")), position = position_stack(vjust = .5)) +
labs(fill = "") + xlab("Programa para Demultiplexear") + ylab("Porcentaje %")
## Plot of software performance
ggplot(perf_soft, aes(x = Software, y = value, fill = forcats::fct_rev(variable))) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(value,"%")), position = position_stack(vjust = .5)) +
labs(fill = "") + xlab("Demultiplex software") + ylab("Percentage %")
## Load the results of demultiplex with gbsx
df_reads_dem <- read.csv("../data/GBSX_reads_stats.csv")
## Filter M_haageana_san_angelensis but not incluid Mhsa_6_2 Mhsa_6_1
mhsa <- df_reads_dem %>%
select(Muestra, Especie) %>%
filter(Especie == "M_haageana_san_angelensis" & Muestra != "Mhsa_6_2" & Muestra != "Mhsa_6_1")
## Create a vector with the previous dataframe
mhsa_filt <- as.vector(mhsa$Muestra)
## Filter the data frame but not included the Muestras filtering previously
msuper <- df_reads_dem %>%
filter(!Muestra %in% mhsa_filt)
## Order levels of the column that ggplot2 uses in x so that they are in the desired order
msuper$ID<-factor(msuper$ID, levels = msuper$ID[order(msuper$Especie)])
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
labs(x = "Samples", y = "Number of reads", fill = "Specie") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
colourCount = length(unique(msuper$Especie))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
labs(x = "Samples", y = "Number of reads", fill = "Specie") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
## Plot the number of reads obtained after demultiplex
ggplot(msuper, aes(x=ID, y=total_sequences, fill = Especie)) +
geom_bar(stat = "identity") +
scale_y_continuous(breaks = c(6000000, 4000000, 2000000, 1000000, 800000)) +
geom_hline(yintercept = 1000000, linetype="dashed", size = 0.6) +
geom_hline(yintercept = 800000, linetype="dashed", size = 0.6) +
labs(x = "Samples", y = "Number of reads", fill = "Species") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_fill_manual(values = getPalette(colourCount))
setwd("~/GBS_Bioinf_Process_Mamm/bin")
# Load the datataset
clust_threshold <- read.csv("../meta/Resultados.csv")
# Load the datataset
clust_threshold <- read.csv("../meta/ipyrad_param_stats.csv")
setwd("~/GBS_Bioinf_Process_Mamm/bin")
# Load the datataset
clust_threshold <- read.csv("../data/ipyrad_param_stats.csv")
# Convert clust_threshold Values in factor
clust_threshold$Value <- as.factor(clust_threshold$Value)
# Convert min_sam_loc values in factor
clust_threshold$min_sam_loc <- as.factor(clust_threshold$min_sam_loc)
# Filter only the clust_threshold values
clust_threshold_2 <- clust_threshold %>%
filter(Param == "clust_threshold") %>%
group_by(min_sam_loc)
# Show the structure of dataset
str(clust_threshold_2)
# Generate the plot of SNPs obteined of clust_threshold's parameters
ggplot(clust_threshold_2, aes(x=Value, y=SNP)) +
geom_line(aes(group=min_sam_loc, color=min_sam_loc), size=1) +
labs(y = "Number of SNPs", x = "Clust threshold") +
scale_color_discrete(breaks=c("40", "60", "80"),
labels=c("40%", "60%", "80%"))
# Generate the plot of Loci obteined of clust_threshold's parameters
ggplot(clust_threshold_2, aes(x=Value, y=Loci)) +
geom_line(aes(group=min_sam_loc, color=min_sam_loc), size=1) +
labs(y = "Number of loci", x = "Clust threshold") +
scale_color_discrete(breaks=c("40", "60", "80"),
labels=c("40%", "60%", "80%"))
# Filter only the mindepth values
min_depth <- clust_threshold %>%
filter(Param == "mindepth") %>%
group_by(min_sam_loc)
# Generate the plot of SNP's obteined of mindepth's parameters
ggplot(min_depth, aes(x=Value, y=SNP)) +
geom_line(aes(group=min_sam_loc, color=min_sam_loc), size=1) +
labs(y = "Number of SNPs", x = "Mindepth majrule") +
scale_color_discrete(breaks=c("40", "60", "80"),
labels=c("40%", "60%", "80%"))
# Generate the plot of Loci obteined of mindepth's parameters
ggplot(min_depth, aes(x=Value, y=Loci)) +
geom_line(aes(group=min_sam_loc, color=min_sam_loc), size=1) +
labs(y = "Number of loci", x = "Mindepth majrule") +
scale_color_discrete(breaks=c("40", "60", "80"),
labels=c("40%", "60%", "80%"))
clust_threshold <- c("0.82/0.85", "0.85/0.88", "0.88/0.91", "0.91/0.94")
Value <-c(37, -6, -73, -39)
clust_threshold_3 <- data.frame(clust_threshold, Value)
# Generate the plot of the iteraction of 80% clust_threshold values
ggplot(clust_threshold_3, aes(x=clust_threshold, y=Value, group = 1)) +
geom_point(size = 2, color = "red") + geom_line(size = 1, color = "blue", linetype = "dashed") +
labs(y = "Number of new Loci", x = "Iteration of Clust threshold")
# Generate the plot of the iteraction of 80% clust_threshold values
ggplot(clust_threshold_3, aes(x=clust_threshold, y=Value, group = 1)) +
geom_point(size = 2, color = "red") + geom_line(size = 1, color = "cyan4", linetype = "dashed") +
labs(y = "Number of new Loci", x = "Iteration of Clust threshold")
# Generate the plot of the iteraction of 80% clust_threshold values
ggplot(clust_threshold_3, aes(x=clust_threshold, y=Value, group = 1)) +
geom_point(size = 2, color = "coral3") + geom_line(size = 1, color = "cyan4", linetype = "dashed") +
labs(y = "Number of new Loci", x = "Iteration of Clust threshold")
# Generate the plot of the iteraction of 80% clust_threshold values
ggplot(clust_threshold_3, aes(x=clust_threshold, y=Value, group = 1)) +
geom_point(size = 2, color = "coral3") + geom_line(size = 1, color = "cyan4", linetype = "dashed") +
labs(y = "Number of new Loci", x = "Iteration of clust threshold")
